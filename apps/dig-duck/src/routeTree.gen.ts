/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LicenseRouteImport } from './routes/license'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthenticatedCrawlerRouteImport } from './routes/_authenticated/crawler'
import { Route as AuthenticatedAdminLicenseManagerRouteImport } from './routes/_authenticated/admin/license-manager'
import { Route as AuthenticatedAdminDashboardRouteImport } from './routes/_authenticated/admin/dashboard'

const LicenseRoute = LicenseRouteImport.update({
  id: '/license',
  path: '/license',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedCrawlerRoute = AuthenticatedCrawlerRouteImport.update({
  id: '/_authenticated/crawler',
  path: '/crawler',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedAdminLicenseManagerRoute =
  AuthenticatedAdminLicenseManagerRouteImport.update({
    id: '/_authenticated/admin/license-manager',
    path: '/admin/license-manager',
    getParentRoute: () => rootRouteImport,
  } as any)
const AuthenticatedAdminDashboardRoute =
  AuthenticatedAdminDashboardRouteImport.update({
    id: '/_authenticated/admin/dashboard',
    path: '/admin/dashboard',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/license': typeof LicenseRoute
  '/crawler': typeof AuthenticatedCrawlerRoute
  '/admin/dashboard': typeof AuthenticatedAdminDashboardRoute
  '/admin/license-manager': typeof AuthenticatedAdminLicenseManagerRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/license': typeof LicenseRoute
  '/crawler': typeof AuthenticatedCrawlerRoute
  '/admin/dashboard': typeof AuthenticatedAdminDashboardRoute
  '/admin/license-manager': typeof AuthenticatedAdminLicenseManagerRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/license': typeof LicenseRoute
  '/_authenticated/crawler': typeof AuthenticatedCrawlerRoute
  '/_authenticated/admin/dashboard': typeof AuthenticatedAdminDashboardRoute
  '/_authenticated/admin/license-manager': typeof AuthenticatedAdminLicenseManagerRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/license'
    | '/crawler'
    | '/admin/dashboard'
    | '/admin/license-manager'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/license'
    | '/crawler'
    | '/admin/dashboard'
    | '/admin/license-manager'
  id:
    | '__root__'
    | '/'
    | '/license'
    | '/_authenticated/crawler'
    | '/_authenticated/admin/dashboard'
    | '/_authenticated/admin/license-manager'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LicenseRoute: typeof LicenseRoute
  AuthenticatedCrawlerRoute: typeof AuthenticatedCrawlerRoute
  AuthenticatedAdminDashboardRoute: typeof AuthenticatedAdminDashboardRoute
  AuthenticatedAdminLicenseManagerRoute: typeof AuthenticatedAdminLicenseManagerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/license': {
      id: '/license'
      path: '/license'
      fullPath: '/license'
      preLoaderRoute: typeof LicenseRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/crawler': {
      id: '/_authenticated/crawler'
      path: '/crawler'
      fullPath: '/crawler'
      preLoaderRoute: typeof AuthenticatedCrawlerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/admin/license-manager': {
      id: '/_authenticated/admin/license-manager'
      path: '/admin/license-manager'
      fullPath: '/admin/license-manager'
      preLoaderRoute: typeof AuthenticatedAdminLicenseManagerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/admin/dashboard': {
      id: '/_authenticated/admin/dashboard'
      path: '/admin/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AuthenticatedAdminDashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LicenseRoute: LicenseRoute,
  AuthenticatedCrawlerRoute: AuthenticatedCrawlerRoute,
  AuthenticatedAdminDashboardRoute: AuthenticatedAdminDashboardRoute,
  AuthenticatedAdminLicenseManagerRoute: AuthenticatedAdminLicenseManagerRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
