generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model competitorOffers {
  id             Int       @id @default(autoincrement())
  productId      Int       @map("product_id")
  crawlJobId     Int?      @map("crawl_job_id")
  competitorName String    @map("competitor_name")
  competitorUrl  String    @map("competitor_url")
  price          Decimal   @db.Decimal(10, 2)
  fetchedAt      DateTime  @default(now()) @map("fetched_at")
  crawlJobs      crawlJobs? @relation(fields: [crawlJobId], references: [id])
  products       products  @relation(fields: [productId], references: [id])

  @@map("competitor_offers")
}

model crawlHistory {
  id              Int           @id @default(autoincrement())
  userEmail       String        @map("user_email")
  deviceId        String        @map("device_id")
  sourceSite      SourceSite    @default(SMARTSTORE) @map("source_site")
  searchUrl       String        @map("search_url")
  searchKeywords  String?       @map("search_keywords")
  status          CrawlStatus   @default(PENDING)
  itemsFound      Int           @default(0) @map("items_found")
  itemsCrawled    Int           @default(0) @map("items_crawled")
  pagesProcessed  Int           @default(0) @map("pages_processed")
  startedAt       DateTime?     @map("started_at")
  completedAt     DateTime?     @map("completed_at")
  durationMs      Int?          @map("duration_ms")
  errorMessage    String?       @map("error_message")
  errorDetails    Json?         @map("error_details")
  userAgent       String?       @map("user_agent")
  proxyUsed       String?       @map("proxy_used")
  requestInterval Int?          @map("request_interval")
  crawlSettings   Json?         @map("crawl_settings")
  metadata        Json?
  priority        Int           @default(1) @map("priority")
  createdAt       DateTime      @default(now()) @map("created_at")
  users           users         @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  crawlItems      crawlItems[]

  @@index([createdAt])
  @@index([deviceId])
  @@index([sourceSite])
  @@index([status])
  @@index([userEmail])
  @@map("crawl_history")
}

model crawlItems {
  id               Int          @id @default(autoincrement())
  crawlHistoryId   Int          @map("crawl_history_id")
  itemId           String?      @map("item_id")
  title            String?
  content          String?
  url              String?
  rating           Decimal?     @db.Decimal(3, 2)
  reviewDate       DateTime?    @map("review_date") @db.Date
  reviewerName     String?      @map("reviewer_name")
  isVerified       Boolean?     @map("is_verified")
  price            Decimal?     @db.Decimal(10, 2)
  originalPrice    Decimal?     @db.Decimal(10, 2) @map("original_price")
  discount         Int?
  stock            Int?
  imageUrls        Json?        @map("image_urls")
  videoUrls        Json?        @map("video_urls")
  siteSpecificData Json?        @map("site_specific_data")
  itemOrder        Int?         @map("item_order")
  pageNumber       Int?         @map("page_number")
  createdAt        DateTime     @default(now()) @map("created_at")
  crawlHistory     crawlHistory @relation(fields: [crawlHistoryId], references: [id], onDelete: Cascade)

  @@index([crawlHistoryId])
  @@index([itemId])
  @@index([price])
  @@index([rating])
  @@index([reviewDate])
  @@map("crawl_items")
}

model crawlJobs {
  id               Int                @id @default(autoincrement())
  userId           Int                @map("user_id")
  requestedAt      DateTime           @default(now()) @map("requested_at")
  startedAt        DateTime?          @map("started_at")
  finishedAt       DateTime?          @map("finished_at")
  errorMsg         String?            @map("error_msg")
  status           CrawlStatus        @default(PENDING)
  competitorOffers competitorOffers[]
  users            users              @relation(fields: [userId], references: [id])

  @@map("crawl_jobs")
}

model crawlTemplates {
  id           Int        @id @default(autoincrement())
  userEmail    String     @map("user_email")
  name         String
  description  String?
  sourceSite   SourceSite @map("source_site")
  maxPages     Int        @default(10) @map("max_pages")
  maxItems     Int        @default(2000) @map("max_items")
  requestDelay Int        @default(1000) @map("request_delay")
  filters      Json?
  selectors    Json?
  isPublic     Boolean    @default(false) @map("is_public")
  usageCount   Int        @default(0) @map("usage_count")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  users        users      @relation(fields: [userEmail], references: [email], onDelete: Cascade)

  @@index([isPublic])
  @@index([sourceSite])
  @@index([userEmail])
  @@map("crawl_templates")
}

model deviceTransfers {
  id           Int           @id @default(autoincrement())
  userEmail    String        @map("user_email")
  oldDeviceId  String        @map("old_device_id")
  newDeviceId  String        @map("new_device_id")
  platform     PlatformType
  transferDate DateTime      @default(now()) @map("transfer_date") @db.Date
  licenseUsers licenseUsers  @relation(fields: [userEmail], references: [userEmail], onDelete: Cascade)

  @@map("device_transfers")
}

model licenseItems {
  id           Int          @id @default(autoincrement())
  userEmail    String       @map("user_email")
  itemType     ItemType     @map("item_type")
  quantity     Int
  purchasedAt  DateTime     @default(now()) @map("purchased_at")
  licenseUsers licenseUsers @relation(fields: [userEmail], references: [userEmail], onDelete: Cascade)

  @@map("license_items")
}

model licenseSubscriptions {
  id               Int                     @id @default(autoincrement())
  userEmail        String                  @map("user_email")
  subscriptionType LicenseSubscriptionType @map("subscription_type")
  startDate        DateTime                @default(now()) @map("start_date") @db.Date
  endDate          DateTime                @map("end_date") @db.Date
  isActive         Boolean                 @default(true) @map("is_active")
  createdAt        DateTime                @default(now()) @map("created_at")
  licenseUsers     licenseUsers            @relation(fields: [userEmail], references: [userEmail], onDelete: Cascade)

  @@map("license_subscriptions")
}

model licenseUsers {
  userEmail            String                   @id @map("user_email")
  licenseKey           String                   @unique @map("license_key")
  allowedDevices       Int                      @default(3) @map("allowed_devices")
  maxTransfers         Int                      @default(5) @map("max_transfers")
  activatedDevices     Json                     @default("[]") @map("activated_devices")
  createdAt            DateTime                 @default(now()) @map("created_at")
  deviceTransfers      deviceTransfers[]
  licenseItems         licenseItems[]
  licenseSubscriptions licenseSubscriptions[]
  users                users                    @relation(fields: [userEmail], references: [email], onDelete: Cascade)

  @@map("license_users")
}

model plans {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  price         Decimal         @db.Decimal(10, 2)
  features      Json
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  billingCycle  BillingCycle    @default(ONE_MONTH) @map("billing_cycle")
  subscriptions subscriptions[]

  @@map("plans")
}

model priceChangeLogs {
  id        Int      @id @default(autoincrement())
  productId Int      @map("product_id")
  oldPrice  Decimal  @db.Decimal(10, 2) @map("old_price")
  newPrice  Decimal  @db.Decimal(10, 2) @map("new_price")
  changedAt DateTime @default(now()) @map("changed_at")
  products  products @relation(fields: [productId], references: [id])

  @@map("price_change_logs")
}

model products {
  id                  Int                  @id @default(autoincrement())
  userId              Int                  @map("user_id")
  smartStoreProductId String               @map("smart_store_product_id")
  name                String
  url                 String
  currentPrice        Decimal              @db.Decimal(10, 2) @map("current_price")
  targetPrice         Decimal              @db.Decimal(10, 2) @map("target_price")
  isActive            Boolean              @default(true) @map("is_active")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  competitorOffers    competitorOffers[]
  priceChangeLogs     priceChangeLogs[]
  users               users                @relation(fields: [userId], references: [id])

  @@map("products")
}

model subscriptions {
  id        Int                @id @default(autoincrement())
  status    SubscriptionStatus @default(ACTIVE)
  startDate DateTime           @default(now()) @map("start_date") @db.Date
  endDate   DateTime?          @map("end_date") @db.Date
  autoRenew Boolean            @default(true) @map("auto_renew")
  createdAt DateTime           @default(now()) @map("created_at")
  updatedAt DateTime           @updatedAt @map("updated_at")
  userId    Int                @map("user_id")
  planId    Int                @map("plan_id")
  plans     plans              @relation(fields: [planId], references: [id])
  users     users              @relation(fields: [userId], references: [id])

  @@map("subscriptions")
}

model users {
  id              Int               @id @default(autoincrement())
  email           String            @unique
  name            String?
  nickname        String?
  isAdmin         Boolean           @default(false) @map("is_admin")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  crawlHistory    crawlHistory[]
  crawlJobs       crawlJobs[]
  crawlTemplates  crawlTemplates[]
  licenseUsers    licenseUsers?
  products        products[]
  subscriptions   subscriptions[]
  mailHistory     mailHistory[]

  @@map("users")
}

enum BillingCycle {
  ONE_MONTH
  THREE_MONTHS
  SIX_MONTHS
  TWELVE_MONTHS
}

enum CrawlStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
  COMPLETED
  CANCELLED
}

enum ItemType {
  SMARTSTORE_CRAWLER
  SUBSCRIPTION_EXTENSION
  EXTRA_DEVICE
  ADMIN_ACCESS
}

enum LicenseSubscriptionType {
  ONE_MONTH
  THREE_MONTHS
  SIX_MONTHS
  TWELVE_MONTHS
}

enum PlatformType {
  WEB
  DESKTOP
}

enum SourceSite {
  SMARTSTORE
  NAVER_BLOG
  COUPANG
  GMARKET
  AUCTION
  ELEVENST
}

model mailHistory {
  id           Int          @id @default(autoincrement())
  userEmail    String?      @map("user_email")
  fromEmail    String       @map("from_email")
  toEmail      String       @map("to_email")
  ccEmails     String[]     @default([]) @map("cc_emails")
  bccEmails    String[]     @default([]) @map("bcc_emails")
  subject      String
  templateId   String?      @map("template_id")
  templateVars Json?        @map("template_vars")
  provider     MailProvider
  messageId    String?      @map("message_id")
  status       MailStatus   @default(PENDING)
  errorMessage String?      @map("error_message")
  sentAt       DateTime?    @map("sent_at")
  deliveredAt  DateTime?    @map("delivered_at")
  openedAt     DateTime?    @map("opened_at")
  clickedAt    DateTime?    @map("clicked_at")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  users        users?       @relation(fields: [userEmail], references: [email], onDelete: SetNull)

  @@index([userEmail])
  @@index([status])
  @@index([createdAt])
  @@index([templateId])
  @@map("mail_history")
}

enum MailStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  BOUNCED
  OPENED
  CLICKED
}

enum MailProvider {
  SMTP
  GMAIL
  OUTLOOK
  ZOHO
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
}
