generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model competitor_offers {
  id             Int         @id @default(autoincrement())
  productId      Int         @map("product_id")
  crawlJobId     Int?        @map("crawl_job_id")
  competitorName String      @map("competitor_name")
  competitorUrl  String      @map("competitor_url")
  price          Decimal     @db.Decimal(10, 2)
  fetchedAt      DateTime    @default(now()) @map("fetched_at")
  crawl_jobs     crawl_jobs? @relation(fields: [crawlJobId], references: [id])
  products       products    @relation(fields: [productId], references: [id])
}

model crawl_history {
  id              Int           @id @default(autoincrement())
  userEmail       String        @map("user_email")
  deviceId        String        @map("device_id")
  sourceSite      SourceSite    @default(SMARTSTORE) @map("source_site")
  searchUrl       String        @map("search_url")
  searchKeywords  String?       @map("search_keywords")
  status          CrawlStatus   @default(PENDING)
  itemsFound      Int           @default(0) @map("items_found")
  itemsCrawled    Int           @default(0) @map("items_crawled")
  pagesProcessed  Int           @default(0) @map("pages_processed")
  startedAt       DateTime?     @map("started_at")
  completedAt     DateTime?     @map("completed_at")
  durationMs      Int?          @map("duration_ms")
  errorMessage    String?       @map("error_message")
  errorDetails    Json?         @map("error_details")
  userAgent       String?       @map("user_agent")
  proxyUsed       String?       @map("proxy_used")
  requestInterval Int?          @map("request_interval")
  crawlSettings   Json?         @map("crawl_settings")
  metadata        Json?
  priority        Int           @default(1) @map("priority")
  createdAt       DateTime      @default(now()) @map("created_at")
  users           users         @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  crawl_items     crawl_items[]

  @@index([createdAt])
  @@index([deviceId])
  @@index([sourceSite])
  @@index([status])
  @@index([userEmail])
}

model crawl_items {
  id               Int           @id @default(autoincrement())
  crawlHistoryId   Int           @map("crawl_history_id")
  itemId           String?       @map("item_id")
  title            String?
  content          String?
  url              String?
  rating           Decimal?      @db.Decimal(3, 2)
  reviewDate       DateTime?     @map("review_date") @db.Date
  reviewerName     String?       @map("reviewer_name")
  isVerified       Boolean?      @map("is_verified")
  price            Decimal?      @db.Decimal(10, 2)
  originalPrice    Decimal?      @db.Decimal(10, 2) @map("original_price")
  discount         Int?
  stock            Int?
  imageUrls        Json?         @map("image_urls")
  videoUrls        Json?         @map("video_urls")
  siteSpecificData Json?         @map("site_specific_data")
  itemOrder        Int?          @map("item_order")
  pageNumber       Int?          @map("page_number")
  createdAt        DateTime      @default(now()) @map("created_at")
  crawl_history    crawl_history @relation(fields: [crawlHistoryId], references: [id], onDelete: Cascade)

  @@index([crawlHistoryId])
  @@index([itemId])
  @@index([price])
  @@index([rating])
  @@index([reviewDate])
}

model crawl_jobs {
  id                Int                 @id @default(autoincrement())
  userId            Int                 @map("user_id")
  requestedAt       DateTime            @default(now()) @map("requested_at")
  startedAt         DateTime?           @map("started_at")
  finishedAt        DateTime?           @map("finished_at")
  errorMsg          String?             @map("error_msg")
  status            CrawlStatus         @default(PENDING)
  competitor_offers competitor_offers[]
  users             users               @relation(fields: [userId], references: [id])
}

model crawl_templates {
  id           Int        @id @default(autoincrement())
  userEmail    String     @map("user_email")
  name         String
  description  String?
  sourceSite   SourceSite @map("source_site")
  maxPages     Int        @default(10) @map("max_pages")
  maxItems     Int        @default(2000) @map("max_items")
  requestDelay Int        @default(1000) @map("request_delay")
  filters      Json?
  selectors    Json?
  isPublic     Boolean    @default(false) @map("is_public")
  usageCount   Int        @default(0) @map("usage_count")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  users        users      @relation(fields: [userEmail], references: [email], onDelete: Cascade)

  @@index([isPublic])
  @@index([sourceSite])
  @@index([userEmail])
}

model device_transfers {
  id            Int           @id @default(autoincrement())
  userEmail     String        @map("user_email")
  oldDeviceId   String        @map("old_device_id")
  newDeviceId   String        @map("new_device_id")
  platform      PlatformType
  transferDate  DateTime      @default(now()) @map("transfer_date") @db.Date
  license_users license_users @relation(fields: [userEmail], references: [email], onDelete: Cascade)
}

model license_items {
  id            Int           @id @default(autoincrement())
  userEmail     String        @map("user_email")
  itemType      ItemType      @map("item_type")
  quantity      Int
  purchasedAt   DateTime      @default(now()) @map("purchased_at")
  license_users license_users @relation(fields: [userEmail], references: [email], onDelete: Cascade)
}

model license_subscriptions {
  id               Int                     @id @default(autoincrement())
  userEmail        String                  @map("user_email")
  subscriptionType LicenseSubscriptionType @map("subscription_type")
  startDate        DateTime                @default(now()) @map("start_date") @db.Date
  endDate          DateTime                @map("end_date") @db.Date
  isActive         Boolean                 @default(true) @map("is_active")
  paymentId        String?                 @map("payment_id")
  createdAt        DateTime                @default(now()) @map("created_at")
  license_users    license_users           @relation(fields: [userEmail], references: [email], onDelete: Cascade)
}

model license_users {
  email                 String                  @id
  licenseKey            String                  @unique @map("license_key")
  allowedDevices        Int                     @default(3) @map("allowed_devices")
  maxTransfers          Int                     @default(5) @map("max_transfers")
  activatedDevices      Json                    @default("[]") @map("activated_devices")
  createdAt             DateTime                @default(now()) @map("created_at")
  device_transfers      device_transfers[]
  license_items         license_items[]
  license_subscriptions license_subscriptions[]
  users                 users                   @relation(fields: [email], references: [email], onDelete: Cascade)
}

model plans {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  price         Decimal         @db.Decimal(10, 2)
  features      Json
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  billingCycle  BillingCycle    @default(MONTHLY) @map("billing_cycle")
  subscriptions subscriptions[]
}

model price_change_logs {
  id        Int      @id @default(autoincrement())
  productId Int      @map("product_id")
  oldPrice  Decimal  @db.Decimal(10, 2) @map("old_price")
  newPrice  Decimal  @db.Decimal(10, 2) @map("new_price")
  changedAt DateTime @default(now()) @map("changed_at")
  products  products @relation(fields: [productId], references: [id])
}

model products {
  id                  Int                 @id @default(autoincrement())
  userId              Int                 @map("user_id")
  smartStoreProductId String              @map("smart_store_product_id")
  name                String
  url                 String
  currentPrice        Decimal             @db.Decimal(10, 2) @map("current_price")
  targetPrice         Decimal             @db.Decimal(10, 2) @map("target_price")
  isActive            Boolean             @default(true) @map("is_active")
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @updatedAt @map("updated_at")
  competitor_offers   competitor_offers[]
  price_change_logs   price_change_logs[]
  users               users               @relation(fields: [userId], references: [id])
}

model subscriptions {
  id        Int                @id @default(autoincrement())
  status    SubscriptionStatus @default(ACTIVE)
  startDate DateTime           @default(now()) @map("start_date") @db.Date
  endDate   DateTime?          @map("end_date") @db.Date
  autoRenew Boolean            @default(true) @map("auto_renew")
  createdAt DateTime           @default(now()) @map("created_at")
  updatedAt DateTime           @updatedAt @map("updated_at")
  userId    Int                @map("user_id")
  planId    Int                @map("plan_id")
  plans     plans              @relation(fields: [planId], references: [id])
  users     users              @relation(fields: [userId], references: [id])
}

model users {
  id              Int               @id @default(autoincrement())
  email           String            @unique
  name            String?
  isAdmin         Boolean           @default(false) @map("is_admin")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  crawl_history   crawl_history[]
  crawl_jobs      crawl_jobs[]
  crawl_templates crawl_templates[]
  license_users   license_users?
  products        products[]
  subscriptions   subscriptions[]
}

enum BillingCycle {
  MONTHLY
  ANNUAL
}

enum CrawlStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
  COMPLETED
  CANCELLED
}

enum ItemType {
  SMARTSTORE_CRAWLER
  SUBSCRIPTION_EXTENSION
  EXTRA_DEVICE
  ADMIN_ACCESS
}

enum LicenseSubscriptionType {
  ONE_MONTH
  THREE_MONTHS
  SIX_MONTHS
  TWELVE_MONTHS
}

enum PlatformType {
  WEB
  DESKTOP
}

enum SourceSite {
  SMARTSTORE
  COUPANG
  GMARKET
  AUCTION
  ELEVENST
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
}
